[{"D:\\universidad\\resolviendo pruebas javascript\\InmueblesReact\\inmobiliaria-app\\src\\index.js":"1","D:\\universidad\\resolviendo pruebas javascript\\InmueblesReact\\inmobiliaria-app\\src\\reportWebVitals.js":"2","D:\\universidad\\resolviendo pruebas javascript\\InmueblesReact\\inmobiliaria-app\\src\\App.js":"3","D:\\universidad\\resolviendo pruebas javascript\\InmueblesReact\\inmobiliaria-app\\src\\theme\\theme.js":"4","D:\\universidad\\resolviendo pruebas javascript\\InmueblesReact\\inmobiliaria-app\\src\\componentes\\layout\\AppNavbar.js":"5","D:\\universidad\\resolviendo pruebas javascript\\InmueblesReact\\inmobiliaria-app\\src\\componentes\\layout\\bar\\BarSesion.js":"6","D:\\universidad\\resolviendo pruebas javascript\\InmueblesReact\\inmobiliaria-app\\src\\componentes\\seguridad\\RegistrarUsuario.jsx":"7","D:\\universidad\\resolviendo pruebas javascript\\InmueblesReact\\inmobiliaria-app\\src\\server\\index.js":"8","D:\\universidad\\resolviendo pruebas javascript\\InmueblesReact\\inmobiliaria-app\\src\\server\\conetxt.js":"9","D:\\universidad\\resolviendo pruebas javascript\\InmueblesReact\\inmobiliaria-app\\src\\server\\firebase.js":"10","D:\\universidad\\resolviendo pruebas javascript\\InmueblesReact\\inmobiliaria-app\\src\\componentes\\seguridad\\Login.jsx":"11","D:\\universidad\\resolviendo pruebas javascript\\InmueblesReact\\inmobiliaria-app\\src\\sesion\\store.js":"12","D:\\universidad\\resolviendo pruebas javascript\\InmueblesReact\\inmobiliaria-app\\src\\sesion\\initialState.js":"13","D:\\universidad\\resolviendo pruebas javascript\\InmueblesReact\\inmobiliaria-app\\src\\sesion\\reducers\\sesionReducer.js":"14","D:\\universidad\\resolviendo pruebas javascript\\InmueblesReact\\inmobiliaria-app\\src\\sesion\\reducers\\index.js":"15","D:\\universidad\\resolviendo pruebas javascript\\InmueblesReact\\inmobiliaria-app\\src\\sesion\\reducers\\openSnackbarReducer.js":"16","D:\\universidad\\resolviendo pruebas javascript\\InmueblesReact\\inmobiliaria-app\\src\\sesion\\actions\\sesionAction.js":"17","D:\\universidad\\resolviendo pruebas javascript\\InmueblesReact\\inmobiliaria-app\\src\\sesion\\actions\\snackbarAction.js":"18","D:\\universidad\\resolviendo pruebas javascript\\InmueblesReact\\inmobiliaria-app\\src\\componentes\\layout\\bar\\MenuDerecha.js":"19","D:\\universidad\\resolviendo pruebas javascript\\InmueblesReact\\inmobiliaria-app\\src\\componentes\\layout\\bar\\MenuIzquierda.js":"20","D:\\universidad\\resolviendo pruebas javascript\\InmueblesReact\\inmobiliaria-app\\src\\componentes\\seguridad\\RutaAutenticada.js":"21","D:\\universidad\\resolviendo pruebas javascript\\InmueblesReact\\inmobiliaria-app\\src\\sesion\\actions\\Keyword.js":"22","D:\\universidad\\resolviendo pruebas javascript\\InmueblesReact\\inmobiliaria-app\\src\\componentes\\vistas\\ListaInmuebles.jsx":"23","D:\\universidad\\resolviendo pruebas javascript\\InmueblesReact\\inmobiliaria-app\\src\\componentes\\vistas\\NuevoInmueble.jsx":"24","D:\\universidad\\resolviendo pruebas javascript\\InmueblesReact\\inmobiliaria-app\\src\\componentes\\seguridad\\Perfilusuario.jsx":"25","D:\\universidad\\resolviendo pruebas javascript\\InmueblesReact\\inmobiliaria-app\\src\\componentes\\vistas\\EditarInmueble.jsx":"26","D:\\universidad\\resolviendo pruebas javascript\\InmueblesReact\\inmobiliaria-app\\src\\sesion\\actions\\InmbuebleAction.js":"27","D:\\universidad\\resolviendo pruebas javascript\\InmueblesReact\\inmobiliaria-app\\src\\componentes\\seguridad\\LoginTelefono.jsx":"28"},{"size":897,"mtime":1612306221533,"results":"29","hashOfConfig":"30"},{"size":362,"mtime":499162500000,"results":"31","hashOfConfig":"30"},{"size":3523,"mtime":1612995842762,"results":"32","hashOfConfig":"30"},{"size":838,"mtime":1613769378446,"results":"33","hashOfConfig":"30"},{"size":1878,"mtime":1612394888147,"results":"34","hashOfConfig":"30"},{"size":4768,"mtime":1613767992203,"results":"35","hashOfConfig":"30"},{"size":5758,"mtime":1612477633072,"results":"36","hashOfConfig":"30"},{"size":165,"mtime":1612225629045,"results":"37","hashOfConfig":"30"},{"size":296,"mtime":1612225576534,"results":"38","hashOfConfig":"30"},{"size":2394,"mtime":1612998591023,"results":"39","hashOfConfig":"30"},{"size":6008,"mtime":1613768084951,"results":"40","hashOfConfig":"30"},{"size":809,"mtime":1612306712560,"results":"41","hashOfConfig":"30"},{"size":29,"mtime":1612363496370,"results":"42","hashOfConfig":"30"},{"size":936,"mtime":1612304568446,"results":"43","hashOfConfig":"30"},{"size":302,"mtime":1612306163501,"results":"44","hashOfConfig":"30"},{"size":448,"mtime":1612305367407,"results":"45","hashOfConfig":"30"},{"size":2782,"mtime":1612368269544,"results":"46","hashOfConfig":"30"},{"size":203,"mtime":1612306572298,"results":"47","hashOfConfig":"30"},{"size":749,"mtime":1612387719672,"results":"48","hashOfConfig":"30"},{"size":1294,"mtime":1612494503231,"results":"49","hashOfConfig":"30"},{"size":667,"mtime":1612392025202,"results":"50","hashOfConfig":"30"},{"size":794,"mtime":1612492833070,"results":"51","hashOfConfig":"30"},{"size":11291,"mtime":1612991436012,"results":"52","hashOfConfig":"30"},{"size":9688,"mtime":1612626418066,"results":"53","hashOfConfig":"30"},{"size":8201,"mtime":1612996246977,"results":"54","hashOfConfig":"30"},{"size":11206,"mtime":1613770153723,"results":"55","hashOfConfig":"30"},{"size":3906,"mtime":1613771151300,"results":"56","hashOfConfig":"30"},{"size":7358,"mtime":1613767791745,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"asrm6f",{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"60"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"60"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"60"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"60"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"101"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"60"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"60"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"60"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"60"},"D:\\universidad\\resolviendo pruebas javascript\\InmueblesReact\\inmobiliaria-app\\src\\index.js",[],["124","125"],"D:\\universidad\\resolviendo pruebas javascript\\InmueblesReact\\inmobiliaria-app\\src\\reportWebVitals.js",[],"D:\\universidad\\resolviendo pruebas javascript\\InmueblesReact\\inmobiliaria-app\\src\\App.js",[],"D:\\universidad\\resolviendo pruebas javascript\\InmueblesReact\\inmobiliaria-app\\src\\theme\\theme.js",[],"D:\\universidad\\resolviendo pruebas javascript\\InmueblesReact\\inmobiliaria-app\\src\\componentes\\layout\\AppNavbar.js",["126"],"import React, { useEffect, useContext } from 'react'\r\nimport AppBar from '@material-ui/core/AppBar'\r\nimport BarSession from './bar/BarSesion'\r\nimport { withStyles } from '@material-ui/styles'\r\nimport { compose } from 'recompose'\r\nimport { consumerFirebase } from '../../server'\r\n\r\nimport { StateContext } from '../../sesion/store'\r\n\r\nconst styles = theme => ({\r\n    //solo va a apracer cuando la pantalla es md \r\n    sectionDesktop: {\r\n        display: \"none\",\r\n        [theme.breakpoints.up(\"md\")]: {\r\n            display: \"flex\"\r\n        }\r\n    },\r\n    sectionMobile: {\r\n        display: \"flex\",\r\n        [theme.breakpoints.up(\"md\")]: {\r\n            display: \"none\"\r\n        }\r\n    }\r\n})\r\n\r\nfunction AppNavbar(props) {\r\n   \r\n    const firebase = props.firebase\r\n    const contextType = useContext(StateContext);\r\n\r\n    useEffect(() => {\r\n        const [{ sesion }, dispatch] = contextType\r\n        if (firebase.auth.currentUser !== null && !sesion) {\r\n                firebase.db\r\n                .collection(\"Users\")\r\n                .doc(firebase.auth.currentUser.uid)//buscando ese usuario\r\n                .get()\r\n                .then(doc => {\r\n                    const usuarioDb = doc.data();\r\n                    dispatch({\r\n                        type: \"INICIAR_SESION\",\r\n                        sesion: usuarioDb,\r\n                        autenticado:true\r\n                    })\r\n                })\r\n        }\r\n        \r\n    }, [contextType,firebase])\r\n\r\n\r\n    const [{sesion}, dispatch] =contextType\r\n    \r\n    //solo los usuaruis logeados pueden ver la barra de navegacion \r\n    return sesion ?(sesion.autenticado ?(\r\n        <div>\r\n            <AppBar position=\"static\">\r\n                <BarSession />\r\n            </AppBar>\r\n        </div>\r\n    )\r\n    : null\r\n    ) \r\n    :null\r\n\r\n}\r\n\r\nexport default compose(withStyles(styles), consumerFirebase)(AppNavbar)\r\n","D:\\universidad\\resolviendo pruebas javascript\\InmueblesReact\\inmobiliaria-app\\src\\componentes\\layout\\bar\\BarSesion.js",["127","128"],"import { Avatar, Button, Drawer, IconButton, Toolbar, Typography } from '@material-ui/core'\r\nimport React, { useState, useContext } from 'react'\r\nimport { withStyles } from '@material-ui/core/styles'\r\nimport { consumerFirebase } from '../../../server'\r\nimport { compose } from 'recompose'\r\nimport { StateContext } from '../../../sesion/store'\r\nimport { SalirSesion } from '../../../sesion/actions/sesionAction'\r\nimport { MenuDerecha } from './MenuDerecha'\r\nimport { MenuIzquierda } from './MenuIzquierda'\r\nimport fotoUsuarioTemp from '../../../logo.svg'\r\nimport { withRouter, Link } from 'react-router-dom'\r\n\r\n//import {MuiThemeProvider} from \"@material-ui/core/styles\";\r\n\r\n\r\n\r\nconst styles = theme => ({\r\n    sectionDesktop: {\r\n        display: \"none\",\r\n        [theme.breakpoints.up(\"md\")]: {\r\n            display: \"flex\"\r\n        }\r\n    },\r\n    grow: {\r\n        flexGrow: 1\r\n    },\r\n    sectionMovil: {\r\n        display: \"flex\",\r\n        [theme.breakpoints.up(\"md\")]: {\r\n            display: \"none\"\r\n        }\r\n    },\r\n    avatarSize: {\r\n        width: 40,\r\n        height: 40\r\n    },\r\n    listItemText: {\r\n        fontSize: \"14px\",\r\n        fontWeight: 600,\r\n        paddingLeft: \"15px\",\r\n        color: \"#212121\"\r\n    },\r\n    list: {\r\n        width: 250\r\n    }\r\n\r\n});\r\nfunction BarSesion(props) {\r\n    const contextType = useContext(StateContext);\r\n    const servfirebase = props.firebase\r\n    const [state, setstate] = useState({\r\n        right: false,\r\n        left: false\r\n    })\r\n\r\n    const salirSesionApp = () => {\r\n        const [{ sesion }, dispatch] = contextType\r\n        SalirSesion(dispatch, servfirebase).then(success => {\r\n            props.history.push(\"/auth/login\")\r\n        })\r\n\r\n    }\r\n    const toggleDrawer = (side, open) => () => {\r\n        setstate({\r\n            [side]: open\r\n        })\r\n    }\r\n\r\n\r\n\r\n    const { classes } = props;\r\n    const [{ sesion, dispatch }] = contextType\r\n    const { usuario } = sesion\r\n    let textoUsuario = usuario.nombre + \" \" + usuario.apellido\r\n    if(!usuario.nombre){\r\n        textoUsuario=usuario.telefono;\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Drawer\r\n                open={state.left}\r\n                onClose={toggleDrawer(\"left\", false)}\r\n                anchor=\"left\"\r\n            >\r\n                <div\r\n                    role=\"button\"\r\n                    onClick={toggleDrawer(\"left\", false)}\r\n                    onKeyDown={toggleDrawer(\"left\", false)}\r\n                >\r\n                    <MenuIzquierda\r\n                        classes={classes}\r\n                    />\r\n                </div>\r\n\r\n            </Drawer>\r\n\r\n            <Drawer\r\n                open={state.right}\r\n                onClose={toggleDrawer(\"right\", false)}\r\n                anchor=\"right\"\r\n            >\r\n                <div\r\n                    role=\"button\"\r\n                    onClick={toggleDrawer(\"right\", false)}\r\n                    onKeyDown={toggleDrawer(\"right\", false)}\r\n                >\r\n                    <MenuDerecha\r\n                        classes={classes}\r\n                        usuario={usuario}\r\n                        textoUsuario={textoUsuario}\r\n                        fotoUsuario={usuario.foto||fotoUsuarioTemp}\r\n                        salirSesion={salirSesionApp}\r\n                    />\r\n                </div>\r\n\r\n            </Drawer>\r\n            <Toolbar>\r\n                <div>\r\n                    <IconButton color=\"inherit\" onClick={toggleDrawer(\"left\", true)}>\r\n                        <i className=\"material-icons\"> menu</i>\r\n                    </IconButton>\r\n                </div>\r\n\r\n                <Typography variant=\"h6\">VAXI HOMES</Typography>\r\n                <div className={classes.grow}></div>\r\n                <div className={classes.sectionDesktop}>\r\n                    <IconButton color=\"inherit\" component={Link} to=\"\">\r\n                        <i className=\"material-icons\">mail_outline</i>\r\n                    </IconButton>\r\n                    <Button color=\"inherit\" onClick={salirSesionApp}>\r\n                        Salir\r\n                    </Button>\r\n                    <Button color=\"inherit\" >{textoUsuario}</Button>\r\n                    <Avatar src={usuario.foto||fotoUsuarioTemp}>\r\n\r\n                    </Avatar>\r\n\r\n                </div>\r\n                <div className={classes.sectionMovil}>\r\n                    <IconButton color=\"inherit\"\r\n                        onClick={toggleDrawer(\"right\", true)}\r\n                    >\r\n                        <i className=\"material-icons\">more_vert</i>\r\n                    </IconButton>\r\n                </div>\r\n            </Toolbar>\r\n        </div>\r\n    )\r\n\r\n}\r\nexport default compose(\r\n    withRouter,\r\n    consumerFirebase,\r\n    withStyles(styles))\r\n    (BarSesion)","D:\\universidad\\resolviendo pruebas javascript\\InmueblesReact\\inmobiliaria-app\\src\\componentes\\seguridad\\RegistrarUsuario.jsx",["129"],"import { Avatar, Button, Container, Grid, TextField, Typography } from '@material-ui/core'\r\n\r\nimport LockOutLineIcon from '@material-ui/icons/LockOutlined'\r\nimport React, { useState,  useContext } from 'react'\r\nimport { compose } from 'recompose'\r\nimport { consumerFirebase } from '../../server'\r\nimport {crearUsuario} from '../../sesion/actions/sesionAction'\r\nimport {StateContext} from '../../sesion/store'\r\nimport {openMensajePantalla} from '../../sesion/actions/snackbarAction'\r\n\r\nconst style = {\r\n    paper: {\r\n        marginTop: 8,\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\"\r\n    },\r\n    avatar: {\r\n        marin: 8,\r\n        backgroundColor: \"#e53935\"\r\n    },\r\n    form: {\r\n        width: \"100%\",\r\n        marginTop: 10\r\n    },\r\n    submit: {\r\n        marginTop: 15,\r\n        marginBotton: 20\r\n    }\r\n}\r\n\r\n/* const usuarioInicial = {\r\n    nombre: '',\r\n    apellido: '',\r\n    email: '',\r\n    password: ''\r\n} */\r\n\r\n//firebase se pasa como prop desde (server/context.js) y se le asigna a servfirebase dentro de useEfect \r\nfunction RegistrarUsuario(props) {\r\n    const contextType = useContext(StateContext);\r\n    const servfirebase = props.firebase\r\n    const [usuario, setUsuario] = useState({\r\n        nombre: '',\r\n        apellido: '',\r\n        email: '',\r\n        password: ''\r\n    })\r\n    //const [prevCount, setPrevCount] = useState(null);\r\n\r\n/*     useEffect(() => {\r\n        if (props.firebase !== servfirebase) {\r\n            setservFirebase(props.firebase)\r\n        }\r\n        return null\r\n    }, [props.firebase, servfirebase]) */\r\n\r\n\r\n    const onChange = async e => {\r\n        e.persist();\r\n        await setUsuario({\r\n            ...usuario,\r\n            [e.target.name]: e.target.value\r\n        });\r\n\r\n        // console.log(usuario);\r\n    }\r\n\r\n    const registrarUsuario = async e => {\r\n        e.preventDefault();\r\n        const [{sesion}, dispatch]=contextType\r\n        let callback =await crearUsuario(dispatch, servfirebase,usuario)\r\n        if(callback.status){\r\n            props.history.push(\"/\");\r\n        }else{\r\n            openMensajePantalla(dispatch, {\r\n                open:true,\r\n                mensaje:callback.mensaje.message\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n/*     const registrarUsuario = e => {\r\n        e.preventDefault();\r\n        console.log(usuario)\r\n\r\n        servfirebase.auth //creando un usuarui en authentification de firebase \r\n            .createUserWithEmailAndPassword(usuario.email, usuario.password)\r\n            .then(auth => {\r\n\r\n                const usuarioDb = {\r\n                    usuarioid: auth.user.uid, // pasamos el id de el usuario en auth al usuario en db  \r\n                    email: usuario.email,\r\n                    apellido: usuario.apellido\r\n                };\r\n                //si guarda el usuarui en Authentificacion de firebase se guarda el usuario en Firestore\r\n                servfirebase.db\r\n                    .collection(\"Users\")\r\n                    .add(usuarioDb) //guardamos el usuario son el password ya que no es \"etico\" esto solo se guarda en auth\r\n                    .then(usuarioAfter => {\r\n                        console.log('esta insercion fue un exito', usuarioAfter);\r\n                        props.history.push(\"/\"); //para redirigir a inicio\r\n                        //setUsuario(usuarioInicial)\r\n                    })\r\n                    .catch(error => {\r\n                        console.log('error', error)\r\n                    })\r\n\r\n            }).catch(error => {\r\n                console.log(error)\r\n            })\r\n\r\n\r\n    } */\r\n\r\n\r\n    return (\r\n        <Container maxWidth=\"md\">\r\n            <div style={style.paper}>\r\n                <Avatar style={style.avatar}>\r\n                    <LockOutLineIcon />\r\n                </Avatar>\r\n                <Typography component=\"h1\" variant=\"h5\">\r\n                    Registre su Cuenta\r\n                    </Typography>\r\n                <form style={style.form}>\r\n                    <Grid container spacing={2}>\r\n                        {/* aqui hace que tome 6 columnas para pantalla completa es decir la mitad del espacio total y 12 osea todo el ancho cuando es movil */}\r\n                        <Grid item md={6} xs={12}>\r\n                            <TextField name=\"nombre\" value={usuario.nombre} onChange={onChange} fullWidth label=\"Ingrese su Nombre\"></TextField>\r\n                        </Grid>\r\n                        <Grid item md={6} xs={12}>\r\n                            <TextField name=\"apellido\" value={usuario.apellido} onChange={onChange} fullWidth label=\"Ingrese su Apellido\"></TextField>\r\n                        </Grid>\r\n                        <Grid item md={6} xs={12}>\r\n                            <TextField name=\"email\" value={usuario.email} onChange={onChange} fullWidth label=\"Ingrese su email\"></TextField>\r\n                        </Grid>\r\n                        <Grid item md={6} xs={12}>\r\n                            <TextField type=\"password\" value={usuario.password} onChange={onChange} name=\"password\" fullWidth label=\"Ingrese su contraseña\"></TextField>\r\n                        </Grid>\r\n\r\n                        <Grid container justify=\"center\">\r\n                            <Grid item xs={12} md={6}>\r\n                                <Button type=\"submit\" onClick={registrarUsuario} variant=\"contained\" fullWidth size=\"large\" color=\"primary\" style={style.submit}>\r\n                                    Registrar\r\n                                    </Button>\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n                    </Grid>\r\n                </form>\r\n            </div>\r\n        </Container>\r\n    )\r\n\r\n}\r\nexport default compose(consumerFirebase)(RegistrarUsuario)","D:\\universidad\\resolviendo pruebas javascript\\InmueblesReact\\inmobiliaria-app\\src\\server\\index.js",[],"D:\\universidad\\resolviendo pruebas javascript\\InmueblesReact\\inmobiliaria-app\\src\\server\\conetxt.js",[],"D:\\universidad\\resolviendo pruebas javascript\\InmueblesReact\\inmobiliaria-app\\src\\server\\firebase.js",[],"D:\\universidad\\resolviendo pruebas javascript\\InmueblesReact\\inmobiliaria-app\\src\\componentes\\seguridad\\Login.jsx",["130","131"],"import { Avatar, Button, Container, Grid, Link, TextField, Typography } from '@material-ui/core'\r\nimport LockOutlineIcon from '@material-ui/icons/LockOutlined'\r\nimport React , {useState, useContext } from 'react'\r\nimport {compose} from 'recompose'\r\nimport {consumerFirebase} from '../../server'\r\nimport {iniciarSesion} from '../../sesion/actions/sesionAction'\r\n\r\nimport {StateContext} from '../../sesion/store'\r\nimport {openMensajePantalla} from '../../sesion/actions/snackbarAction'\r\n\r\n\r\nconst style={\r\n    paper:{\r\n        marginTop:9,\r\n        display:\"flex\",\r\n        flexDirection:\"column\",\r\n        alignItems:\"center\"\r\n    },\r\n    avatar:{\r\n        marigin:5,\r\n        backgroundColor:\"red\"\r\n    },\r\n    form:{\r\n        width:\"100%\",\r\n        marginTop:8  \r\n    },\r\n    submit:{\r\n        marginTop:10,\r\n        marginBottom:20\r\n    }\r\n    \r\n}\r\n    \r\n function Login(props) {   \r\n    const contextType = useContext(StateContext); //uso el contexto de store\r\n   // const [contextType , setContextType]=useState(null)\r\n    const [usuario, setUsuario] = useState({\r\n        email:\"\",\r\n        password:\"\"\r\n    })\r\n    const servfirebase= props.firebase\r\n\r\n    const onChange=async e=>{\r\n        e.persist();\r\n        await setUsuario({\r\n        ...usuario,\r\n            [e.target.name]:e.target.value\r\n        });\r\n        //console.log(usuario)\r\n    }\r\n/*     useEffect(()=>{\r\n        //setContextType(StateContext)\r\n        if (props.firebase !== servfirebase) {\r\n            setservFirebase(props.firebase)\r\n          }\r\n          return null\r\n     },[props.firebase,servfirebase]) */\r\n      \r\n     /* const login =e =>{\r\n         e.preventDefault();\r\n        servfirebase.auth\r\n        .signInWithEmailAndPassword(usuario.email, usuario.password)\r\n        .then(auth => {\r\n            props.history.push('/'); //una vez que se complete el login me lleva a la pagina principal\r\n        })\r\n        .catch(error=> {\r\n            console.log(error)\r\n        })\r\n     } */\r\n     const login= async e=>{\r\n        e.preventDefault();\r\n        const [{sesion}, dispatch]=contextType\r\n        const {email, password}=usuario\r\n        let callback =await iniciarSesion(dispatch, servfirebase,email, password)\r\n        if(callback.status){\r\n            props.history.push(\"/\");\r\n        }else{\r\n            openMensajePantalla(dispatch, {\r\n                open:true,\r\n                mensaje:callback.mensaje.message\r\n            })\r\n        }\r\n     }\r\n\r\n     //solo con este metodo cambia de contraseña por medio del email usando solo con firebase \r\n     const resetearPassword=()=>{\r\n        const [{sesion}, dispatch]=contextType\r\n        servfirebase.auth.sendPasswordResetEmail(usuario.email)\r\n        .then(success=>{\r\n            openMensajePantalla(dispatch,{\r\n                open:true,\r\n                mensaje:\"se han enviado un correo electronico a tu cuenta\"\r\n            })\r\n        })\r\n        .catch(error=>{\r\n            openMensajePantalla(dispatch,{\r\n                open:true,\r\n                mensaje:error.message\r\n            })\r\n        })\r\n     }\r\n\r\n    return (\r\n        \r\n        \r\n            /* xs para movil */\r\n            <Container maxWidth=\"xs\">\r\n                <div style ={style.paper}>\r\n                    <Avatar style={style.avatar}>\r\n                        <LockOutlineIcon></LockOutlineIcon>\r\n                    </Avatar>\r\n                    {/* esto se usa para variar el tamaño de la fuente que va a ser responsive desde h1 a h5 */}\r\n                    <Typography component=\"h1\" variant=\"h5\">\r\n                        Ingrese Usuario\r\n                    </Typography>\r\n                    <form style={style.form}>\r\n                        <TextField\r\n                        variant=\"outlined\" /* borde outlined */\r\n                        label=\"E-mail\"\r\n                        name=\"email\"\r\n                        fullWidth /* para que tome el 100% de la columna */\r\n                        margin=\"normal\" /* margen normal para separar los textfield */\r\n                        onChange={onChange}\r\n                        value={usuario.email}\r\n                        />\r\n                        <TextField\r\n                        variant=\"outlined\"\r\n                        label=\"password\"\r\n                        type=\"password\"\r\n                        name=\"password\"\r\n                        fullWidth\r\n                        margin=\"normal\"\r\n                        onChange={onChange}\r\n                        value={usuario.password}\r\n                        />\r\n                        <Button\r\n                        type=\"submit\"\r\n                        fullWidth\r\n                        variant=\"contained\" /* para dar un fondo */\r\n                        color=\"primary\" /* para dar color */\r\n                        onClick={login}\r\n                        style={style.submit}\r\n                        >\r\n                            Ingresar\r\n                        </Button>\r\n                        <Grid container>\r\n                            <Grid item xs>\r\n                                <Link href=\"#\" variant=\"body2\" onClick={resetearPassword}>\r\n                                    {\"Olvido su contraseña?\"}\r\n                                </Link>\r\n                                \r\n                            </Grid>\r\n                            <Grid item>\r\n                            <Link href=\"/auth/registrarUsuario\" variant=\"body2\">\r\n                                    {\"No tienes cuenta? Registrate\"}\r\n                                </Link>\r\n                            </Grid>\r\n                        </Grid>\r\n                        \r\n                    </form>\r\n                    <Button fullWidth variant=\"contained\" color=\"primary\" style={style.submit} href=\"/auth/loginTelefono\">\r\n                        Ingrese con su telefono\r\n                    </Button>\r\n                </div>\r\n            </Container>\r\n            \r\n        \r\n    )\r\n}\r\nexport default compose(consumerFirebase)(Login)\r\n","D:\\universidad\\resolviendo pruebas javascript\\InmueblesReact\\inmobiliaria-app\\src\\sesion\\store.js",[],"D:\\universidad\\resolviendo pruebas javascript\\InmueblesReact\\inmobiliaria-app\\src\\sesion\\initialState.js",[],"D:\\universidad\\resolviendo pruebas javascript\\InmueblesReact\\inmobiliaria-app\\src\\sesion\\reducers\\sesionReducer.js",[],"D:\\universidad\\resolviendo pruebas javascript\\InmueblesReact\\inmobiliaria-app\\src\\sesion\\reducers\\index.js",[],"D:\\universidad\\resolviendo pruebas javascript\\InmueblesReact\\inmobiliaria-app\\src\\sesion\\reducers\\openSnackbarReducer.js",[],"D:\\universidad\\resolviendo pruebas javascript\\InmueblesReact\\inmobiliaria-app\\src\\sesion\\actions\\sesionAction.js",[],"D:\\universidad\\resolviendo pruebas javascript\\InmueblesReact\\inmobiliaria-app\\src\\sesion\\actions\\snackbarAction.js",[],"D:\\universidad\\resolviendo pruebas javascript\\InmueblesReact\\inmobiliaria-app\\src\\componentes\\layout\\bar\\MenuDerecha.js",[],["132","133"],"D:\\universidad\\resolviendo pruebas javascript\\InmueblesReact\\inmobiliaria-app\\src\\componentes\\layout\\bar\\MenuIzquierda.js",[],"D:\\universidad\\resolviendo pruebas javascript\\InmueblesReact\\inmobiliaria-app\\src\\componentes\\seguridad\\RutaAutenticada.js",["134"],"import {Route, Redirect} from 'react-router-dom';\r\nimport React from 'react';\r\nimport { useStateValue } from '../../sesion/store';\r\n//esto sirve para que nadie pueda pasar directo a alguna pagina antes debe iniciar sesion\r\nfunction RutaAutenticada({component: Component, autenticadoFirebase, ...rest}) {\r\n\r\n    const [{autenticado}, dispatch] = useStateValue();\r\n\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            render={(props) => (autenticado===true || autenticadoFirebase !==null) \r\n            ? <Component {...props} {...rest} />\r\n            :<Redirect to=\"/auth/login\" />\r\n            }\r\n        />\r\n    )\r\n}\r\n\r\nexport default RutaAutenticada;","D:\\universidad\\resolviendo pruebas javascript\\InmueblesReact\\inmobiliaria-app\\src\\sesion\\actions\\Keyword.js",[],"D:\\universidad\\resolviendo pruebas javascript\\InmueblesReact\\inmobiliaria-app\\src\\componentes\\vistas\\ListaInmuebles.jsx",[],"D:\\universidad\\resolviendo pruebas javascript\\InmueblesReact\\inmobiliaria-app\\src\\componentes\\vistas\\NuevoInmueble.jsx",["135"],"import { Container, Paper,Grid,Breadcrumbs,Link,Typography,TextField,Button,Table,TableBody,TableRow,TableCell } from '@material-ui/core'\r\nimport React, { Component } from 'react'\r\nimport HomeIcon from \"@material-ui/icons/Home\";\r\nimport { consumerFirebase } from \"../../server\";\r\nimport { openMensajePantalla } from \"../../sesion/actions/snackbarAction\";\r\nimport ImageUploader from \"react-images-upload\";\r\nimport { v4 as uuidv4 } from 'uuid'; // esta libreria se descargo de npm i uuid\r\nimport { crearKeyword } from '../../sesion/actions/Keyword';\r\n\r\n\r\nconst style ={\r\n    container: {\r\n        paddingTop: \"8px\"\r\n      },\r\n      paper: {\r\n        marginTop: 8,\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\",\r\n        padding: \"20px\",\r\n        backgroundColor: \"#f5f5f5\"\r\n      },\r\n      link: {\r\n        display: \"flex\"\r\n      },\r\n      homeIcon: {\r\n        width: 20,\r\n        height: 20,\r\n        marginRight: \"4px\"\r\n      },\r\n      submit: {\r\n        marginTop: 15,\r\n        marginBottom: 10\r\n      },\r\n      foto: {\r\n        height: \"100px\"\r\n      }\r\n}\r\n\r\n//componente sin hooks \r\n class NuevoInmueble extends Component {\r\n\r\n    state = {\r\n        inmueble: {\r\n          direccion: \"\",\r\n          ciudad: \"\",\r\n          pais: \"\",\r\n          descripcion: \"\",\r\n          interior: \"\",\r\n          fotos: []\r\n        },\r\n        archivos: [] // esta es para que se guarde  las fotos de manera temporal (nombre y Url) en el storage de react \r\n                    // para poder eliminarlos antes de enviar a guardar en firebase \r\n      };\r\n    \r\n      //este es un handlechange que captura los datos de los textfield y foto\r\n      entraDatoEnEstado = e => {\r\n        let inmueble_ = Object.assign({}, this.state.inmueble);\r\n        inmueble_[e.target.name] = e.target.value;\r\n        this.setState({\r\n          inmueble: inmueble_\r\n        });\r\n      };\r\n    \r\n      //metodo para subir fotos y previsualizarlas sin gurdarlas \r\n      subirFotos = documentos => {\r\n        //Object.keys devuelve un array de las propiedades names de un objeto\r\n\r\n        Object.keys(documentos).forEach(function(key) {\r\n            //a documentos se esta creando un atributo temporal llamado URLTEMP\r\n            //URL.createObjectURL recibe un media stream  y crea una url temporal\r\n            //con esto podremos observar temporalmente las fotos en la pagina \r\n           documentos[key].urlTemp = URL.createObjectURL(documentos[key]);\r\n        });\r\n    \r\n        this.setState({\r\n            //concat sirve para unir dos o mas arrays\r\n            //en archivos se guardan las urls temporales \r\n          archivos: this.state.archivos.concat(documentos)\r\n        });\r\n      };\r\n    \r\n      guardarInmueble = () => {\r\n        const { archivos, inmueble } = this.state;\r\n    \r\n         //Crearle a cada image(archivo) un alias, ese alias es la referencia con la cual posteriormente lo invocaras\r\n        //Ademas ese alias sera almacenado en la base de datos(firestore/firebase)\r\n    \r\n        //recorro todos los archivos\r\n        const idUser= this.props.firebase.auth.currentUser.uid\r\n        Object.keys(archivos).forEach(function(key) {\r\n          let valorDinamico = Math.floor(new Date().getTime() / 1000); //tomamos el tiempo actual en mili segundos para crear un alias\r\n          let nombre = archivos[key].name;\r\n          let extension = nombre.split(\".\").pop();\r\n          archivos[key].alias = ( nombre.split(\".\")[0] + \"_\" + valorDinamico +\".\" +extension).replace(/\\s/g, \"_\").toLowerCase();\r\n          //archivos[key].idUser = idUser;// creo un atributo idUser  para usarlo en el guardado de las imagenes \r\n        });\r\n    \r\n        const textoBusqueda =\r\n          inmueble.direccion + \" \" + inmueble.ciudad + \" \" + inmueble.pais; \r\n        let keywords = crearKeyword(textoBusqueda);\r\n      \r\n        //guardamos las fotos en el storage  y luego que se complete guardamos las urls en el campo fotos de firestore\r\n        this.props.firebase.guardarDocumentos(archivos, idUser).then(arregloUrls => {\r\n          inmueble.fotos = arregloUrls;//arregloUrls tiene las urls de todas las fotos que guaramos en storage\r\n          inmueble.keywords = keywords; // se guarda en un atributo keywords  en firestore\r\n          inmueble.propietario = idUser //se gurada el id del usuario en el storage \r\n    \r\n          this.props.firebase.db\r\n            .collection(\"Inmuebles\") /// si no existe esa coleccion la crea \r\n            .add(inmueble)\r\n            .then(success => {\r\n              this.props.history.push(\"/\"); //redirige al inicio\r\n            })\r\n            .catch(error => {\r\n              openMensajePantalla({\r\n                open: true,\r\n                mensaje: error\r\n              });\r\n            });\r\n        \r\n        \r\n         });\r\n      };\r\n    \r\n      //metodo para eliminar cada  url del arreglo archivos que guarda temporalmente las fotos  \r\n      eliminarFoto = nombreFoto => () => {\r\n\r\n        //nombre foto representa \r\n        this.setState({\r\n            //decimos que archivos es igual al arreglo de archivos sin el archivo que se selecciono para eliminar \r\n          archivos: this.state.archivos.filter(archivo => {\r\n            return archivo.name !== nombreFoto;\r\n          })\r\n        });\r\n      };\r\n    \r\n    render() {\r\n        let imagenKey = uuidv4();\r\n        return (\r\n            <Container style={style.container}>\r\n        <Paper style={style.paper}>\r\n          <Grid container spacing={3}>\r\n            <Grid item xs={12} md={8}>\r\n              <Breadcrumbs aria-label=\"breadcrumb\">\r\n                <Link color=\"inherit\" style={style.link} href=\"/\">\r\n                  <HomeIcon style={style.homeIcon} />\r\n                  Home\r\n                </Link>\r\n                <Typography color=\"textPrimary\">Nuevo Inmueble</Typography>\r\n              </Breadcrumbs>\r\n            </Grid>\r\n\r\n            <Grid item xs={12} md={12}>\r\n              <TextField\r\n                name=\"direccion\"\r\n                label=\"Direccion del inmueble\"\r\n                fullWidth\r\n                onChange={this.entraDatoEnEstado}\r\n                value={this.state.inmueble.direccion}\r\n              />\r\n            </Grid>\r\n\r\n            <Grid item xs={12} md={6}>\r\n              <TextField\r\n                name=\"ciudad\"\r\n                label=\"Ciudad\"\r\n                fullWidth\r\n                onChange={this.entraDatoEnEstado}\r\n                value={this.state.inmueble.ciudad}\r\n              />\r\n            </Grid>\r\n\r\n            <Grid item xs={12} md={6}>\r\n              <TextField\r\n                name=\"pais\"\r\n                label=\"Pais\"\r\n                fullWidth\r\n                onChange={this.entraDatoEnEstado}\r\n                value={this.state.inmueble.pais}\r\n              />\r\n            </Grid>\r\n\r\n            <Grid item xs={12} md={12}>\r\n              <TextField\r\n                name=\"descripcion\"\r\n                label=\"Descripcion del Inmueble\"\r\n                fullWidth\r\n                multiline\r\n                onChange={this.entraDatoEnEstado}\r\n                value={this.state.inmueble.descripcion}\r\n              />\r\n            </Grid>\r\n\r\n            <Grid item xs={12} md={12}>\r\n              <TextField\r\n                name=\"interior\"\r\n                label=\"Interior del Inmueble\"\r\n                fullWidth\r\n                multiline\r\n                onChange={this.entraDatoEnEstado}\r\n                value={this.state.inmueble.interior}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n\r\n          <Grid container justify=\"center\">\r\n            <Grid item xs={12} sm={6}>\r\n              <ImageUploader\r\n                key={imagenKey} /* debe ser un valor dinamico */\r\n                withIcon={true}\r\n                buttonText=\"Seleccione imagenes\"\r\n                onChange={this.subirFotos}\r\n                imgExtension={[\".jpg\", \".gif\", \".png\", \".jpeg\"]}\r\n                maxFileSize={5242880} /* 5 Mb */\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} sm={6}>\r\n              {/* aqui es para previsualizar las fotos para poder eliminarlas o seleccionar otras antes de enviarlas */}\r\n              <Table> \r\n                <TableBody>\r\n                  {this.state.archivos.map((archivo, i) => (\r\n                    <TableRow key={i}>\r\n                      <TableCell align=\"left\">\r\n                        <img src={archivo.urlTemp} style={style.foto} />\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <Button\r\n                          variant=\"contained\"\r\n                          color=\"secondary\"\r\n                          size=\"small\"\r\n                          onClick={this.eliminarFoto(archivo.name)} /* pese a que archivo no tiene un atributo name se almacena temporalmente el nombre en ese atributo */\r\n                        >\r\n                          Eliminar\r\n                        </Button>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  ))}\r\n                </TableBody>\r\n              </Table>\r\n            </Grid>\r\n            \r\n          </Grid>\r\n\r\n          <Grid container justify=\"center\">\r\n            <Grid item xs={12} md={6}>\r\n              <Button\r\n                type=\"button\"\r\n                fullWidth\r\n                variant=\"contained\"\r\n                size=\"large\"\r\n                color=\"primary\"\r\n                style={style.submit}\r\n                onClick={this.guardarInmueble}\r\n              >\r\n                Guardar\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </Paper>\r\n      </Container>\r\n        )\r\n    }\r\n}\r\n\r\nexport default consumerFirebase(NuevoInmueble);\r\n","D:\\universidad\\resolviendo pruebas javascript\\InmueblesReact\\inmobiliaria-app\\src\\componentes\\seguridad\\Perfilusuario.jsx",[],"D:\\universidad\\resolviendo pruebas javascript\\InmueblesReact\\inmobiliaria-app\\src\\componentes\\vistas\\EditarInmueble.jsx",["136"],"import React, { Component } from 'react';\r\nimport { consumerFirebase } from '../../server';\r\nimport { Paper, Container, Grid, Breadcrumbs, Link, Typography, TextField, Button, Table, TableRow, TableCell, TableBody } from '@material-ui/core';\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport ImageUploader from 'react-images-upload';\r\nimport { v4 as uuidv4 } from 'uuid'; // esta libreria se descargo de npm i uuid\r\nimport { crearKeyword } from '../../sesion/actions/Keyword';\r\nconst style={\r\n    container: {\r\n        paddingTop : \"8px\"\r\n    },\r\n    paper: {\r\n        marginTop: 8,\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\",\r\n        padding: \"20px\",\r\n        backgroundColor: \"#f5f5f5\"\r\n    },\r\n    link: {\r\n        padding: \"20px\",\r\n        backgroundColor: \"#f5f5f5\"\r\n    },\r\n    homeIcon:{\r\n        width: 20,\r\n        height:20,\r\n        marginRight: \"4px\"\r\n    },\r\n    submit:{\r\n        marginTop: 15,\r\n        marginBottom:10\r\n    },\r\n    fotoInmueble: {\r\n        height: \"100px\"\r\n    }\r\n}\r\n\r\nclass EditarInmueble extends Component {\r\n    state = {\r\n        inmueble : {\r\n            direccion : \"\",\r\n            ciudad: \"\",\r\n            pais:\"\",\r\n            descripcion:\"\",\r\n            interior:\"\",    \r\n            fotos: []\r\n        }\r\n    }\r\n\r\n    cambiarDato = e => {\r\n        let inmueble = Object.assign({}, this.state.inmueble);\r\n        inmueble[e.target.name] = e.target.value;\r\n        this.setState({inmueble});\r\n    }\r\n\r\n    subirImagenes = imagenes =>{\r\n        const { inmueble } = this.state;\r\n        const {id} = this.props.match.params; //capturo el id del inmueble  a editar \r\n\r\n        //agregar un nombre dinamico por cada imagen que necesites subir al firestorage\r\n        const idUser= this.props.firebase.auth.currentUser.uid\r\n        Object.keys(imagenes).forEach(key=>{\r\n            let codigoDinamico =  uuidv4();\r\n            let nombreImagen = imagenes[key].name;\r\n            let extension = nombreImagen.split(\".\").pop();\r\n            imagenes[key].alias = (nombreImagen.split(\".\")[0]  + \"_\" + codigoDinamico + \".\" + extension ).replace(/\\s/g,\"_\").toLowerCase();\r\n        })\r\n\r\n        this.props.firebase.guardarDocumentos(imagenes, idUser).then(urlImagenes => {\r\n            inmueble.fotos =  inmueble.fotos.concat(urlImagenes);//para que a lo existente agregue \r\n\r\n            this.props.firebase.db\r\n                .collection(\"Inmuebles\")\r\n                .doc(id) //esecifico a que documento quiero actualizar \r\n                .set(inmueble, {merge: true})\r\n                .then(success =>{\r\n                    this.setState({ //actualizo el estado luego de guardar \r\n                       inmueble \r\n                    })\r\n                })\r\n        })\r\n    }\r\n\r\n    //eliminar foto de la base de datos \r\n    eliminarFoto = fotoUrl => async () =>{\r\n        \r\n        const {inmueble} = this.state;\r\n        const {id} = this.props.match.params;\r\n\r\n        //expresion regular para extraer el codigo unico de la url de la foto\r\n        let fotoID = fotoUrl.match(/[\\w-]+.(jpg|png|jepg|gif|svg)/);\r\n        fotoID = fotoID[0];\r\n        fotoID=fotoID.substr(2)// esto es para quitar los dos primeros letras ya que es 2f(codigo)\r\n        console.log(fotoID)\r\n\r\n        const idUser= this.props.firebase.auth.currentUser.uid\r\n        await this.props.firebase.eliminarDocumento(fotoID,idUser);\r\n\r\n        let fotoList = this.state.inmueble.fotos.filter(foto => {//para traer la nueva lista de fotos son las que fueron eliminadas del storage\r\n            return foto !== fotoUrl;\r\n        })\r\n        \r\n\r\n        inmueble.fotos = fotoList;\r\n        //esta nueva lista se agrega en la base de datos \r\n        this.props.firebase.db\r\n            .collection(\"Inmuebles\")\r\n            .doc(id)\r\n            .set(inmueble, {merge: true})\r\n            .then(success => {\r\n                this.setState({\r\n                    inmueble\r\n                })\r\n            })\r\n    }\r\n\r\n    async componentDidMount() {\r\n        const {id} = this.props.match.params; // esto es para capturar el id del inmueble del Lista Inmuebles\r\n        \r\n        const inmuebleCollection = this.props.firebase.db.collection(\"Inmuebles\");\r\n        const inmuebleDB = await inmuebleCollection.doc(id).get(); //llamo al inmuble x id  \r\n\r\n        this.setState({\r\n            inmueble : inmuebleDB.data()\r\n        })\r\n\r\n    }\r\n\r\n    guardarInmueble = () => {\r\n        const {inmueble} = this.state;\r\n        const {id} = this.props.match.params;\r\n\r\n        ///creamos nuevas keywords ya que e va a editar \r\n        const textoBusqueda = inmueble.direccion + \" \" + inmueble.ciudad + \" \" + inmueble.pais;\r\n        const keyWords = crearKeyword(textoBusqueda);\r\n\r\n        inmueble.keywords = keyWords;\r\n        inmueble.propietario = this.props.firebase.auth.currentUser.uid;\r\n\r\n        this.props.firebase.db\r\n            .collection(\"Inmuebles\")\r\n            .doc(id)\r\n            .set(inmueble, {merge: true})\r\n            .then( success => {\r\n                this.props.history.push(\"/\");\r\n            })\r\n\r\n    }\r\n\r\n    render() {\r\n        let uniqueID = uuidv4();\r\n\r\n        return (\r\n            <Container style={style.container}>\r\n                <Paper style={style.paper}>\r\n                    <Grid container spacing={3}>\r\n                        <Grid item xs={12} md={8}>\r\n                            <Breadcrumbs aria-label=\"breadcrumb\">\r\n                                <Link color=\"inherit\" style={style.link} href=\"/\" >\r\n                                    <HomeIcon style={style.homeIcon} />\r\n                                    Home\r\n                                </Link>\r\n                                <Typography color=\"textPrimary\">Editar Inmueble</Typography>\r\n                            </Breadcrumbs>\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={12}>\r\n                            <TextField \r\n                                name=\"direccion\"\r\n                                label=\"Direccion del inmueble\"\r\n                                fullWidth\r\n                                onChange={this.cambiarDato}\r\n                                value={this.state.inmueble.direccion}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={6}>\r\n                            <TextField \r\n                                name=\"ciudad\"\r\n                                label=\"Ciudad\"\r\n                                fullWidth\r\n                                onChange={this.cambiarDato}\r\n                                value={this.state.inmueble.ciudad}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={6}>\r\n                            <TextField \r\n                                name=\"pais\"\r\n                                label=\"Pais\"\r\n                                fullWidth\r\n                                onChange={this.cambiarDato}\r\n                                value={this.state.inmueble.pais}\r\n                            />\r\n                        </Grid>\r\n\r\n                        <Grid item xs={12} sm={12}>\r\n                            <TextField \r\n                                name=\"descripcion\"\r\n                                label=\"Descripcion\"\r\n                                fullWidth\r\n                                rowsMax=\"4\"\r\n                                multiline\r\n                                onChange={this.cambiarDato}\r\n                                value={this.state.inmueble.descripcion}\r\n                            />\r\n                        </Grid>\r\n\r\n                        <Grid item xs={12} sm={12}>\r\n                            <TextField \r\n                                name=\"interior\"\r\n                                label=\"Interior\"\r\n                                fullWidth\r\n                                rowsMax=\"4\"\r\n                                onChange={this.cambiarDato}\r\n                                value={this.state.inmueble.interior}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Grid container justify=\"center\">\r\n                        <Grid item xs={12} sm={6}>\r\n                            <ImageUploader \r\n                                key={uniqueID}\r\n                                withIcon={true}\r\n                                buttonText=\"Seleccion su imagen\"\r\n                                onChange={this.subirImagenes}\r\n                                imgExtension={[\".jpg\",\".gif\",\".png\",\".jpeg\"]}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={6}>\r\n                            <Table>\r\n                                <TableBody>\r\n                                    {\r\n                                        this.state.inmueble.fotos \r\n                                        ?this.state.inmueble.fotos.map((foto, i) =>(\r\n                                            <TableRow key={i}>\r\n                                                 <TableCell align=\"left\">\r\n                                                    <img src={foto} style={style.fotoInmueble} />\r\n                                                 </TableCell>   \r\n                                                 <TableCell align=\"left\">\r\n                                                    <Button\r\n                                                        variant=\"contained\"\r\n                                                        color=\"secondary\"\r\n                                                        size=\"small\"\r\n                                                        onClick={this.eliminarFoto(foto)}\r\n                                                    >\r\n                                                        Eliminar\r\n                                                    </Button>\r\n                                                 </TableCell>\r\n                                            </TableRow>            \r\n                                        ))\r\n                                        :\"\"\r\n                                    }\r\n                                </TableBody>\r\n                            </Table>\r\n                        </Grid>\r\n\r\n                    </Grid>\r\n\r\n\r\n                    <Grid container justify=\"center\">\r\n                        <Grid item xs={12} sm={6}>\r\n                            <Button\r\n                                type=\"button\"\r\n                                fullWidth\r\n                                variant=\"contained\"\r\n                                size=\"large\"\r\n                                color=\"primary\"\r\n                                style={style.submit}\r\n                                onClick={this.guardarInmueble}\r\n                            >\r\n                                Guardar\r\n                            </Button>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n\r\n\r\n\r\n                </Paper>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default consumerFirebase(EditarInmueble);","D:\\universidad\\resolviendo pruebas javascript\\InmueblesReact\\inmobiliaria-app\\src\\sesion\\actions\\InmbuebleAction.js",[],"D:\\universidad\\resolviendo pruebas javascript\\InmueblesReact\\inmobiliaria-app\\src\\componentes\\seguridad\\LoginTelefono.jsx",["137","138","139"],"import React, { Component } from 'react'\r\nimport * as firebaseui from 'firebaseui'\r\nimport { Avatar, Button, Container, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, Grid, TextField, Typography } from '@material-ui/core'\r\nimport LockOutlineIcon from '@material-ui/icons/LockOutlined';\r\nimport { consumerFirebase } from '../../server'\r\nimport {StateContext} from '../../sesion/store';\r\nimport { openMensajePantalla } from '../../sesion/actions/snackbarAction';\r\nconst style={\r\n    paper:{\r\n        marginTop: 9,\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\"\r\n    },\r\n    avatar: {\r\n        margin: 5,\r\n        backgroundColor: \"red\"\r\n    },\r\n    form: {\r\n        width: \"100%\",\r\n        marginTop: 8\r\n    },\r\n    submit: {\r\n        marginTop: 10,\r\n        marginBottom: 20\r\n    },\r\n    captcha : {\r\n        flexGrow  : 1,\r\n        marginBottom : 10\r\n    }\r\n    \r\n}\r\n\r\n\r\n\r\nclass LoginTelefono extends Component {\r\n    static contextType = StateContext;\r\n\r\n    state = {\r\n        disable : true,\r\n        dialogAbierto : false,\r\n        codigoConfirmacion : null,\r\n        usuario : {\r\n            telefono : '',\r\n            codigo : ''\r\n        }\r\n    }\r\n\r\n\r\n    componentDidMount(){\r\n        const {firebase} = this.props;\r\n\r\n        firebase.auth.languageCode = \"es\";\r\n        window.recaptchaVerifier = new firebase.authorization.RecaptchaVerifier(\r\n            this.recaptcha,\r\n            {\r\n                size : \"normal\",\r\n                callback : response => {\r\n                    this.setState({\r\n                        disable : false\r\n                    })\r\n                },\r\n                \"expired-callback\" : function(){\r\n                    this.setState({\r\n                        disable: true\r\n                    });\r\n\r\n                    //window.location.reload();\r\n                }\r\n            }\r\n        );\r\n\r\n        window.recaptchaVerifier.render().then(function(widgetID){\r\n            window.recaptchaVerifierId = widgetID;\r\n        });\r\n\r\n\r\n    }\r\n\r\n    verificarNumero = e => {\r\n        e.preventDefault();\r\n        console.log('exeute o nor');\r\n        const {firebase} = this.props;\r\n        const appVerificacion = window.recaptchaVerifier;\r\n\r\n        const [{sesion}, dispatch] = this.context;\r\n\r\n        firebase.auth\r\n            .signInWithPhoneNumber(this.state.usuario.telefono, appVerificacion) //metodo para iniciar sesion x telefono\r\n            .then(codigoEnviado => {\r\n                this.setState({\r\n                      dialogAbierto : true,\r\n                      codigoConfirmacion:codigoEnviado       \r\n                })\r\n            })\r\n            .catch(error=>{\r\n                console.log('error', error);\r\n                openMensajePantalla(dispatch, {\r\n                    open: true,\r\n                    mensaje : error.message\r\n                })\r\n            })\r\n    }\r\n\r\n    onChange = e => {\r\n        let usuario = Object.assign({}, this.state.usuario);\r\n        usuario[e.target.name] = e.target.value;\r\n        this.setState({usuario})\r\n\r\n    }\r\n\r\n\r\n    loginConTelefono = () => {\r\n        const {firebase} = this.props;\r\n\r\n        let credencial = firebase.authorization.PhoneAuthProvider.credential(this.state.codigoConfirmacion.verificationId, this.state.usuario.codigo);\r\n\r\n        const [{usuario}, dispatch] = this.context;\r\n\r\n\r\n        firebase.auth\r\n            .signInAndRetrieveDataWithCredential(credencial)\r\n                .then(authUser => {\r\n                    firebase.db\r\n                        .collection(\"Users\")\r\n                        .doc(authUser.user.uid)\r\n                        .set({\r\n                            id: authUser.user.uid,\r\n                            telefono: authUser.user.phoneNumber\r\n                        }, {merge: true} )\r\n                        .then(success=>{\r\n\r\n                            firebase.db\r\n                                .collection(\"Users\")\r\n                                .doc(authUser.user.uid)\r\n                                .get()\r\n                                .then(doc=>{\r\n                                    dispatch({\r\n                                        type:'INICIAR_SESION',\r\n                                        sesion : doc.data(),\r\n                                        autenticado: true\r\n                                    });\r\n                                    this.props.history.push('/');\r\n                               })\r\n                        })\r\n                })\r\n                .catch(error=>{\r\n\r\n\r\n                    openMensajePantalla(dispatch, {\r\n                        open: true,\r\n                        mensaje : error.message\r\n                    })\r\n                })\r\n                \r\n\r\n\r\n    }\r\n\r\n   \r\n    render() {\r\n        return (\r\n            <Container maxWidth=\"xs\">\r\n                <Dialog open={this.state.dialogAbierto} onClose={()=>{  this.setState({ dialogAbierto: false}) } }>\r\n                   <DialogTitle>Ingrese su codigo</DialogTitle> \r\n                   <DialogContent>\r\n                       <DialogContentText>\r\n                           Ingrese el codigo que recibio por mensaje de texto\r\n                       </DialogContentText>\r\n                        <TextField autoFocus margin=\"dense\" name=\"codigo\" fullWidth value={this.state.usuario.codigo} onChange={this.onChange}/>\r\n                   </DialogContent>\r\n                   <DialogActions>\r\n                       <Button color=\"primary\" onClick={()=>{  this.setState({ dialogAbierto: false}) } }>Cancelar</Button>\r\n                       <Button color=\"primary\" onClick={this.loginConTelefono}>Verificar</Button>\r\n                   </DialogActions>\r\n\r\n                </Dialog>\r\n\r\n\r\n                <div style={style.paper}>\r\n                    <Avatar style={style.avatar}>\r\n                        <LockOutlineIcon />\r\n                    </Avatar>\r\n                    <Typography component=\"h1\" variant=\"h5\">\r\n                        Ingrese numero telefonico\r\n                    </Typography>\r\n                    <form style={style.form}>\r\n                        <Grid container style={style.captcha} justify=\"center\">\r\n                            <div ref={ref => (this.recaptcha = ref)}></div>    \r\n                        </Grid>\r\n                        <TextField \r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            name=\"telefono\"\r\n                            label=\"Ingrese numero telefonico\"\r\n                            value={this.state.usuario.telefono} \r\n                            onChange={this.onChange}\r\n                        />\r\n                        <Button\r\n                            type=\"submit\"\r\n                            fullWidth\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            style={style.submit}\r\n                            onClick={this.verificarNumero}\r\n                            disabled = {this.state.disable}\r\n                        >\r\n                            Enviar\r\n                        </Button>\r\n                        \r\n                    </form>\r\n                </div>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default consumerFirebase(LoginTelefono) \r\n",{"ruleId":"140","replacedBy":"141"},{"ruleId":"142","replacedBy":"143"},{"ruleId":"144","severity":1,"message":"145","line":51,"column":22,"nodeType":"146","messageId":"147","endLine":51,"endColumn":30},{"ruleId":"144","severity":1,"message":"148","line":57,"column":18,"nodeType":"146","messageId":"147","endLine":57,"endColumn":24},{"ruleId":"144","severity":1,"message":"145","line":72,"column":22,"nodeType":"146","messageId":"147","endLine":72,"endColumn":30},{"ruleId":"144","severity":1,"message":"148","line":71,"column":17,"nodeType":"146","messageId":"147","endLine":71,"endColumn":23},{"ruleId":"144","severity":1,"message":"148","line":72,"column":17,"nodeType":"146","messageId":"147","endLine":72,"endColumn":23},{"ruleId":"144","severity":1,"message":"148","line":87,"column":17,"nodeType":"146","messageId":"147","endLine":87,"endColumn":23},{"ruleId":"140","replacedBy":"149"},{"ruleId":"142","replacedBy":"150"},{"ruleId":"144","severity":1,"message":"145","line":7,"column":27,"nodeType":"146","messageId":"147","endLine":7,"endColumn":35},{"ruleId":"151","severity":1,"message":"152","line":225,"column":25,"nodeType":"153","endLine":225,"endColumn":73},{"ruleId":"151","severity":1,"message":"152","line":236,"column":53,"nodeType":"153","endLine":236,"endColumn":98},{"ruleId":"144","severity":1,"message":"154","line":2,"column":13,"nodeType":"146","messageId":"147","endLine":2,"endColumn":23},{"ruleId":"144","severity":1,"message":"148","line":86,"column":17,"nodeType":"146","messageId":"147","endLine":86,"endColumn":23},{"ruleId":"144","severity":1,"message":"155","line":118,"column":17,"nodeType":"146","messageId":"147","endLine":118,"endColumn":24},"no-native-reassign",["156"],"no-negated-in-lhs",["157"],"no-unused-vars","'dispatch' is assigned a value but never used.","Identifier","unusedVar","'sesion' is assigned a value but never used.",["156"],["157"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'firebaseui' is defined but never used.","'usuario' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]